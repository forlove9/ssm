<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql语句，后继有重要重要 #{}：点位符，相当于jdbc的? ${}：字符串拼接指令，如果入参为普通数据类型{}内部只写value -->
<!-- 动态代理开发规则： 1、namespace必需是接口的全路径名 2、接口的方法名必需与sql id 一致 3、接口的入参与parameterType类型一致 
	4、接口的返回值必须与resultType类型一致 -->
<mapper namespace="com.itheima.mybatis.mapper.UserMapper">

	<!-- sql片段的抽取，定义 -->
	<sql id="user_sql">
		`id`,
		`username`,
		`birthday`,
		`sex`,
		`address`
	</sql>

	<!-- id:sql id，语句的唯一标识 parameterType:入参的数据类型 resultType:返回结果的数据类型 -->
	<select id="getUserById" parameterType="int" resultType="uSEr">
		SELECT
		<!-- sql片段使用:refid引用定义好的sql片段id -->
		<include refid="user_sql" />
		FROM `user`
		WHERE id = #{id2}
	</select>

	<!-- resultType：如果返回结果为集合，只需设置为每一个的数据类型 -->
	<select id="getUserByUserName" parameterType="string"
		resultType="com.itheima.mybatis.pojo.User">
		SELECT
		<include refid="user_sql" />
		FROM `user`
		<!-- WHERE username LIKE #{name} -->
		WHERE username LIKE '%${value}%'
	</select>

	<!-- 插入用户 -->
	<!-- useGeneratedKeys:使用自增 keyProperty与之配套使用，这里是user的主键 -->
	<insert id="insertUser" parameterType="com.itheima.mybatis.pojo.User"
		useGeneratedKeys="true" keyProperty="id">
		<!-- selectKey：主键返回 keyProperty:user中的主键属性 resultType:主键数据类型 order:指定selectKey何时执行：AFTER之后 -->
		<!-- <selectKey keyProperty="id" resultType="int" order="AFTER"> SELECT 
			LAST_INSERT_ID() </selectKey> -->
		INSERT INTO `user`
		(`username`,
		`birthday`,
		`sex`,
		`address`)
		VALUES (#{username},
		#{birthday},
		#{sex},
		#{address});
	</insert>


	<!-- 第二天开始 -->
	<!-- resultType：如果返回结果为集合，只需设置为每一个的数据类型 -->
	<select id="getUserByQueryVo" parameterType="queryvo"
		resultType="com.itheima.mybatis.pojo.User">
		SELECT
		<include refid="user_sql" />
		FROM `user`
		<!-- WHERE username LIKE #{name} -->
		WHERE username LIKE '%${user.username}%'
	</select>

	<select id="getUserCount" resultType="int">
		SELECT COUNT(1) FROM `user`
	</select>

	<!-- resultType：如果返回结果为集合，只需设置为每一个的数据类型 -->
	<select id="getUserByPojo" parameterType="user"
		resultType="com.itheima.mybatis.pojo.User">
		SELECT
		`id`,
		`username`,
		`birthday`,
		`sex`,
		`address`
		FROM `user`
		<!-- WHERE username LIKE #{name} -->
		<!-- WHERE 1 = 1 <if test="username != null and username != ''"> and username 
			LIKE '%${username}%' </if> <if test="sex != null and sex != ''"> and sex 
			= #{sex} </if> -->

		<!-- <where>自动补上where关键字，同时处理多余and,用了where标签就不能再手动加上where关键字 -->
		<where>
			<if test="username != null and username != ''">
				and username LIKE '%${username}%'
			</if>
			<if test="sex != null and sex != ''">
				and sex = #{sex}
			</if>
		</where>
	</select>

	<select id="getUserByIds" parameterType="queryvo" resultType="user">
		SELECT
		<include refid="user_sql" />
		FROM `user`
		<where>
			<!-- foreach循环标签 collection:要遍历的集合 open:循环开始之前输出的内容 item:设置循环变量 separator:分隔符 
				close:循环结束之后输出的内容 -->
			<!-- 目的：id IN(1,25,29,30,35) -->
			<foreach collection="ids" open="id IN(" item="uId" separator=","
				close=")">
				#{uId}
			</foreach>
		</where>
	</select>

	<resultMap type="user" id="user_order_map">
		<id property="id" column="id" />
		<result property="username" column="username" />
		<result property="address" column="address" />
		<result property="birthday" column="birthday" />
		<result property="sex" column="sex" />
		<!-- collection用于配置一对多关联
			 property:User当中Order的属性
			 ofType:orders的数据类型，支持别名
		-->
		<collection property="orders" ofType="com.itheima.mybatis.pojo.Order">
			<!-- <id>用于映射主键 -->
			<id property="id" column="oid"/>
			<!-- 普通字段用<result>映射 -->
			<result property="userId" column="id"/>
			<result property="number" column="number"/>
			<result property="createtime" column="createtime"/>
			<result property="note" column="note"/>
		</collection>
	</resultMap>

	<select id="getUserOrderMap" resultMap="user_order_map">
		SELECT
		u.`id`,
		u.`username`,
		u.`birthday`,
		u.`sex`,
		u.`address`,
		u.`uuid2`,
		o.`id` oid,
		o.`number`,
		o.`createtime`,
		o.`note`
		FROM
		`user` u
		LEFT JOIN `order` o
		ON o.`user_id` = u.`id`
	</select>

</mapper>
